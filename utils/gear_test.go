package utils

import (
	"strings"
	"testing"

	. "github.com/gmlewis/go-gcode/gcode"
)

// Trace a path at given offset.
func trace(g *GCode, path []Tuple, offset Tuple) {
	g.GotoXY(path[len(path)-1].Add(offset))
	g.MoveXY(offset.Offset(path...)...)
}

func TestHalfTooth(t *testing.T) {
	const (
		D               = 100 // Pitch diameter (mm)
		baseDiameter    = 93.96926208
		outsideDiameter = 122.22222222
		rootDiameter    = 68.25815097
		workDiameter    = 77.77777778
	)

	ht := halfTooth(baseDiameter, outsideDiameter, rootDiameter, workDiameter)
	g := New()
	trace(g, ht, X(D/2))
	got := strings.Split(g.String(), "\n")
	want := strings.Split(halfToothOut, "\n")

	if len(got) != len(want) {
		t.Errorf("halfTooth = %v lines, want %v", len(got), len(want))
	}

	for i, line := range got {
		if i < len(want) && line != want[i] {
			t.Fatalf("halfTooth line #%v:\n%v\nwant:\n%v", i+1, line, want[i])
		}
	}
}

func TestRotatedHalfTooth(t *testing.T) {
	const (
		N               = 9   // Number of teeth
		D               = 100 // Pitch diameter (mm)
		baseDiameter    = 93.96926208
		outsideDiameter = 122.22222222
		rootDiameter    = 68.25815097
		workDiameter    = 77.77777778
	)

	rht := rotatedHalfTooth(baseDiameter, outsideDiameter, rootDiameter, workDiameter, N)
	g := New()
	trace(g, rht, X(D/2))
	got := strings.Split(g.String(), "\n")
	want := strings.Split(rotatedHalfToothOut, "\n")

	if len(got) != len(want) {
		t.Errorf("rotatedHalfTooth = %v lines, want %v", len(got), len(want))
	}

	for i, line := range got {
		if i < len(want) && line != want[i] {
			t.Fatalf("rotatedHalfTooth line #%v:\n%v\nwant:\n%v", i+1, line, want[i])
		}
	}
}

func TestMirroredTooth(t *testing.T) {
	const (
		N               = 9   // Number of teeth
		D               = 100 // Pitch diameter (mm)
		baseDiameter    = 93.96926208
		outsideDiameter = 122.22222222
		rootDiameter    = 68.25815097
		workDiameter    = 77.77777778
	)

	rht := rotatedHalfTooth(baseDiameter, outsideDiameter, rootDiameter, workDiameter, N)
	mht := mirrorTooth(rht)
	g := New()
	trace(g, mht, X(D/2))
	got := strings.Split(g.String(), "\n")
	want := strings.Split(mirroredToothOut, "\n")

	if len(got) != len(want) {
		t.Errorf("mirroredTooth = %v lines, want %v", len(got), len(want))
	}

	for i, line := range got {
		if i < len(want) && line != want[i] {
			t.Fatalf("mirroredTooth line #%v:\n%v\nwant:\n%v", i+1, line, want[i])
		}
	}
}

var halfToothOut = `G0 X110.53076049 Y8.40207921
G1 X84.06805556 Y-2.78330942
G1 X84.08028537 Y-2.50320055
G1 X84.11688175 Y-2.22522347
G1 X84.17756617 Y-1.95149377
G1 X84.26187677 Y-1.68409468
G1 X84.36917192 Y-1.42506129
G1 X84.49863502 Y-1.17636498
G1 X84.64928079 Y-0.93989849
G1 X84.81996272 Y-0.71746147
G1 X85.00938182 Y-0.51074680
G1 X85.21609649 Y-0.32132770
G1 X85.43853351 Y-0.15064577
G1 X85.67500000 Y0.00000000
G1 X85.92369631 Y0.12946310
G1 X86.18272971 Y0.23675825
G1 X86.45012879 Y0.32106886
G1 X86.72385850 Y0.38175327
G1 X87.00183557 Y0.41834965
G1 X87.28194445 Y0.43057947
G1 X87.56205332 Y0.41834965
G1 X87.84003039 Y0.38175327
G1 X88.11376010 Y0.32106886
G1 X88.38115918 Y0.23675825
G1 X88.64019258 Y0.12946310
G1 X96.98463104 Y0.00000000
G1 X97.01324700 Y0.00066605
G1 X97.09899026 Y0.00532641
G1 X97.24154725 Y0.01796570
G1 X97.44039603 Y0.04254903
G1 X97.69480738 Y0.08301244
G1 X98.00384625 Y0.14325315
G1 X98.36637371 Y0.22712012
G1 X98.78104924 Y0.33840449
G1 X99.24633343 Y0.48083028
G1 X99.76049117 Y0.65804511
G1 X100.32159515 Y0.87361112
G1 X100.92752980 Y1.13099603
G1 X101.57599562 Y1.43356435
G1 X102.26451388 Y1.78456882
G1 X102.99043171 Y2.18714204
G1 X103.75092750 Y2.64428829
G1 X104.54301675 Y3.15887562
G1 X105.36355818 Y3.73362821
G1 X106.20926023 Y4.37111893
G1 X107.07668783 Y5.07376223
G1 X107.96226956 Y5.84380733
G1 X108.86230503 Y6.68333168
G1 X109.77297259 Y7.59423474
G1 X110.53076049 Y8.40207921
`

var rotatedHalfToothOut = `G0 X111.07016797 Y-2.23662351
G1 X83.06716863 Y-8.65688046
G1 X83.12785305 Y-8.38315076
G1 X83.21216366 Y-8.11575167
G1 X83.31945880 Y-7.85671828
G1 X83.44892191 Y-7.60802197
G1 X83.59956767 Y-7.37155548
G1 X83.77024960 Y-7.14911845
G1 X83.95966870 Y-6.94240378
G1 X84.16638337 Y-6.75298469
G1 X84.38882039 Y-6.58230276
G1 X84.62528688 Y-6.43165699
G1 X84.87398319 Y-6.30219388
G1 X85.13301659 Y-6.19489874
G1 X85.40041568 Y-6.11058813
G1 X85.67414538 Y-6.04990372
G1 X85.95212246 Y-6.01330734
G1 X86.23223133 Y-6.00107752
G1 X86.51234020 Y-6.01330734
G1 X86.79031728 Y-6.04990372
G1 X87.06404698 Y-6.11058813
G1 X87.33144607 Y-6.19489874
G1 X87.59047946 Y-6.30219388
G1 X87.83917577 Y-6.43165699
G1 X88.07564226 Y-6.58230276
G1 X96.27082892 Y-8.15879556
G1 X96.29912579 Y-8.16310874
G1 X96.38437569 Y-8.17340833
G1 X96.52696171 Y-8.18571583
G1 X96.72705838 Y-8.19603570
G1 X96.98463104 Y-8.20036509
G1 X97.29943561 Y-8.19470361
G1 X97.67101881 Y-8.17506300
G1 X98.09871881 Y-8.13747694
G1 X98.58166627 Y-8.07801067
G1 X99.11878583 Y-7.99277069
G1 X99.70879802 Y-7.87791429
G1 X100.35022158 Y-7.72965909
G1 X101.04137619 Y-7.54429237
G1 X101.78038560 Y-7.31818038
G1 X102.56518121 Y-7.04777746
G1 X103.39350598 Y-6.72963500
G1 X104.26291877 Y-6.36041026
G1 X105.17079907 Y-5.93687498
G1 X106.11435210 Y-5.45592380
G1 X107.09061426 Y-4.91458245
G1 X108.09645894 Y-4.31001572
G1 X109.12860272 Y-3.63953515
G1 X110.18361185 Y-2.90060651
G1 X111.07016797 Y-2.23662351
`

var mirroredToothOut = `G0 X83.06716863 Y8.65688046
G1 X111.07016797 Y0.00000000
G1 Y2.23662351
G1 X110.18361185 Y2.90060651
G1 X109.12860272 Y3.63953515
G1 X108.09645894 Y4.31001572
G1 X107.09061426 Y4.91458245
G1 X106.11435210 Y5.45592380
G1 X105.17079907 Y5.93687498
G1 X104.26291877 Y6.36041026
G1 X103.39350598 Y6.72963500
G1 X102.56518121 Y7.04777746
G1 X101.78038560 Y7.31818038
G1 X101.04137619 Y7.54429237
G1 X100.35022158 Y7.72965909
G1 X99.70879802 Y7.87791429
G1 X99.11878583 Y7.99277069
G1 X98.58166627 Y8.07801067
G1 X98.09871881 Y8.13747694
G1 X97.67101881 Y8.17506300
G1 X97.29943561 Y8.19470361
G1 X96.98463104 Y8.20036509
G1 X96.72705838 Y8.19603570
G1 X96.52696171 Y8.18571583
G1 X96.38437569 Y8.17340833
G1 X96.29912579 Y8.16310874
G1 X96.27082892 Y8.15879556
G1 X88.07564226 Y6.58230276
G1 X87.83917577 Y6.43165699
G1 X87.59047946 Y6.30219388
G1 X87.33144607 Y6.19489874
G1 X87.06404698 Y6.11058813
G1 X86.79031728 Y6.04990372
G1 X86.51234020 Y6.01330734
G1 X86.23223133 Y6.00107752
G1 X85.95212246 Y6.01330734
G1 X85.67414538 Y6.04990372
G1 X85.40041568 Y6.11058813
G1 X85.13301659 Y6.19489874
G1 X84.87398319 Y6.30219388
G1 X84.62528688 Y6.43165699
G1 X84.38882039 Y6.58230276
G1 X84.16638337 Y6.75298469
G1 X83.95966870 Y6.94240378
G1 X83.77024960 Y7.14911845
G1 X83.59956767 Y7.37155548
G1 X83.44892191 Y7.60802197
G1 X83.31945880 Y7.85671828
G1 X83.21216366 Y8.11575167
G1 X83.12785305 Y8.38315076
G1 X83.06716863 Y8.65688046
`
